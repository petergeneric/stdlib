# WARNING: guice.bootstrap.class is an internal configuration field
# WARNING: Do not change, do not replicate to lib/services/<webapp>.properties
guice.bootstrap.class=com.peterphi.usermanager.guice.UserManagerSetup

scan.packages=com.peterphi.usermanager

# Configure with the path to the hibernate configuration file to use.
# This should be a classpath resource. The database connection 
#hibernate.properties=

# Controls whether HTML exceptions are presented within the User Manager webpage.
# If disabled we'll use the default exception rendering which can provide more detail and
# has fewer dependencies (and is therefore more likely to work).
ui.simpleexceptions.enabled=true

# Controls whether the main "User Manager" hero unit on the index page is present
ui.hero.enabled=true
#ui.hero.text=

# If true then the /register page will be available for use by anonymous users.
# This should only be used to create the first user (for maximum security)
authentication.allowAnonymousRegistration=true

# Use custom authentication for this webapp
framework.webauth.provider=user-manager

liquibase.changelog=/liquibase/changelog.xml

# "internal" for internal only, ldap for internal and then ldap
# If "ldap" is specified, must configure LDAP below
authentication-backend=internal


### LDAP Configuration
# LDAP Endpoint can usually be figured out with "dig any _ldap._tcp.(domain)"
#ldap.endpoint=ldap://hostname:389
#ldap.domain=domain-goes-here - e.g. domain.dom
#ldap.filter=(&(objectClass=user)(sAMAccountName=%s))
#ldap.search-base=(search base, usually a comma-separated list of dc= parts of the ldap.domain), e.g. dc=domain,dc=dom

# Allows us to update LDAP role data in the background; to do this we need an account dedicated to the User Manager that just
# queries LDAP looking for group information.
#ldap.background-role-updates=false
#ldap.user-manager-account.username=
#ldap.user-manager-account.password=


# Substitution to perform on LDAP groups - this takes the first CN= value and uses it
#ldap.group-regex.find=(?i)^cn=([^,]+),.*$
#ldap.group-regex.replace=$1

# Optional, replacements to apply post-substitution for builtin groups (allows LDAP users to be user manager / app / framework administrators)
#ldap.group.user-manager-admin=
#ldap.group.admin=
#ldap.group.framework-admin=
#ldap.group.framework-info=

# By default, be permissive with how users can use their Access Keys: allow them to access all services
auth.access-key.create-new-session-context-if-necessary=true
# By default, interactive users are automatically granted new session contexts (i.e. new services automatically gain access to their user info upon request)
auth.interactive.create-new-session-context-if-necessary=true
# If set to true, this would allow all accesses to implicitly create a new session context without interactive approval if needed
#auth.all.create-new-session-context-if-necessary=false

# If true, logins created using LDAP credentials will be allowed to use the Session Reconnect Key system to stay logged in longer without reauthenticating
# N.B. if enabled, ldap.background-role-updates should be enabled so that we can capture group changes from LDAP
auth.ldap.allow-session-reconnect=false
