User Manager
============

The User Manager implements an `RFC 6749 OAuth2 Server <https://tools.ietf.org/html/rfc6749>`_, with additional features for services built using this application framework such as the delegation of user capabilities from an initial user-facing call to internal services acting on the user's behalf.

Services
--------
Services in the User Manager are OAuth2 Clients, able to request information on the users accessing them. 

Services must specify a list of approved Endpoints. A service may have multiple endpoints (e.g. in the event of having different reverse proxies for different clients)
Endpoints must either be an exact match to the client's callback endpoint, or an exact match when the suffix "/oauth2/client/cb" is added to the endpoint stored in the database.

Generally speaking, framework services take the application root and 3rd party OAuth2 services specify an exact callback endpoint (for instance, Grafana would have an endpoint of "http://example.com/grafana/login/generic_oauth")



Users
-----
Users can either be local (where users are authenticated against a locally stored hashed password) or remote (e.g. where an Active Directory server is relied upon for authentication, with group data periodically synced from Active Directory).

Users have some basic properties (Name, e-mail address), a list of roles and a general set of other claims. These claims currently include:
 - Preferred user timezone, expressed as a locale (e.g. Europe/London)
 - Preferred presentation format for a datetime

Users backed by an Active Directory account have their role data periodically synced in the background (as long as the User Manager has been granted credentials to do this).
 
Roles
-----
Users and Services both have roles; these are designed to be used for authorisation purposes by services. Roles can be defined locally and/or created as a result of an Active Directory sync.


OAuth Session
-------------

When a user accesses a Service (and once, if enabled, approves access to the Service via the User Manager approval UI) a Session is created giving that Service the ability to retrieve user data (name, roles, timezone, etc.) until the session expires (which may be due to lack of renewal on the part of the service, or due to a user manager internal maximum session length).

See the :ref:`On-Behalf-Of section below<OnBehalfOf>` for further information on how sessions can be referenced by a service-to-service call.

API Keys
--------

Both Users and Services may have API Keys, a simple Bearer Token value that can be sent with a service call to identify themselves and show their capabilities.

Users and Services can each have two API keys at any given time, a primary and a secondary token. When a new Primary token is generated, the Secondary token is removed, and replaced with the old Primary token. This is designed to allow orderly gradual replacement of API keys.

On-Behalf-Of
------------
.. _OnBehalfOf:

The OAuth2 standard does not include any discussion of how best to implement On-Behalf-Of functionality; as such, the User Manager implements a simple version that can be used to pass along user details and roles, along with the roles of the service that is processing their request.

The following key concepts are involved:
 - Delegation Token: this is a short-lived Bearer token that services can pass to other services when communicating on behalf of a user
 - User: the end user whose incomming call resulted in a service-to-service call
 - Origin Service: this is the service that the User's OAuth Session is with. The Delegated Token gains the roles of this Service too.

The Delegation Token is generated by the User Manager on behalf of the Origin Service. The Origin Service gives a maximum lifetime for this token, after which time the token will be treated as invalid. Services should be configured such that the lifetime of the token exceeds the maximum duration of a series of calls on behalf of a user (otherwise the token would expire part-way through the call).

When a service receives a Delegation Token, they look it up like any other User Manager Bearer Token to get user and role data. The data returned indicates that this is a delegated token, and lists the Origin Service should it be useful for writing to their audit logs during auditable events.

When a service receiving a Delegation Token wishes to make a call to a third service, it passes the original Delegation Token along as part of that call.

Configuring a Framework Service for OAuth2
------------------------------------------
To connect a service to the User Manager, you must Create a service (User Manager Admin access required).

Once created, the User Manager will display the configuration option to add to `tomcat/shared/lib/services/(webapp).properties`.

Framework Webauth should be enabled using "framework.webauth.enabled=true" either in webapp.properties or in the global environment.properties file.

The OAuth2 webauth provider will automatically be picked up and become available.

Service-to-Service Authentication
'''''''''''''''''''''''''''''''''
To authenticate to other Services (granting all the roles added for our Service), an API Key must be generated on the Service page in the User Manager. Then this bearer token should be set, and then referenced for all services you wish to authenticate against. Here is the example config:

.. code-block:: java
	
	service.oauth2.own_api_key=UMB/STK/=abcdefgh1234567890

	# This property is needed for each service (or group or services) we are communicating with	
	service.(name).bearer=${service.oauth2.own_api_key}

The latter property may be changed in the future to simplify the opt-in process (e.g. `service.(name).send-oauth=true` however this has not yet been settled)

Opting in to each service is necessary to ensure that a service does not inappropriately send their API key to a non-trusted service (e.g. a 3rd party service) who could then leak it or use it to gain privileges they should not be granted.

Delegation
''''''''''
Once a service has the necessary OAuth2 configuration set, all outgoing services it communicates with may be enabled for delegation. This is achieved by setting `service.(name).delegation=true` alongside the other service endpoint configuration (see documentation on REST clients for more info)

