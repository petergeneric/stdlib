package com.peterphi.std.guice.apploader;

import com.peterphi.std.annotation.Doc;
import org.apache.commons.lang.StringUtils;

public class GuiceServiceProperties
{
	@Doc("Service endpoint")
	public static final String ENDPOINT = "service.*.endpoint";

	@Doc("Username for auth (default empty, which causes it to be extracted from endpoint)")
	public static final String USERNAME = "service.*.username";

	@Doc("Password for auth (default empty, which causes it to be extracted from endpoint)")
	public static final String PASSWORD = "service.*.password";

	@Doc("If true, this service will be treated as fast-fail; fast-fail behaviour is Fast Fail annotation on REST iface ORred with this value (default false)")
	public static final String FAST_FAIL = "service.*.fast-fail";

	@Doc("The auth type to use for this service. Default " +
	     GuiceConstants.JAXRS_CLIENT_AUTH_DEFAULT +
	     ", can also be " +
	     GuiceConstants.JAXRS_CLIENT_AUTH_PREEMPT)
	public static final String AUTH_TYPE = "service.*.auth-type";

	@Doc("The bearer token to supply for calls to this service")
	public static final String BEARER_TOKEN = "service.*.bearer";

	@Doc("If true (and if OkHttp is on the classpath) then comms to this service will be handled using unencrypted HTTP2 With Prior Knowledge (default false)")
	public static final String H2C = "service.*.h2c";

	@Doc("If true, calls made to this service will include a delegated OAuth token, so that the remote service can see the user's details+roles (default false)")
	public static final String SHOULD_DELEGATE_USER_TOKEN = "service.*.delegation";

	@Doc("If set, bearer tokens will be generated by this class (default unset, which honours .delegation and .bearer-token")
	public static final String BEARER_GENERATOR = "service.*.bearer-generator";

	@Doc("If true then cookies set by the remote service will be stored (default is global value jaxrs.cookie-store, which defaults to false)")
	public static final String STORE_COOKIES = "service.*.cookie-store";


	public static String prop(final String prop, final String serviceName)
	{
		return StringUtils.replaceOnce(prop, "*", serviceName);
	}
}
